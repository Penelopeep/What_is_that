// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.0
// source: PlayerLoginRsp.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CmdId: 176
// Name: DKIPBAAHKJM
type PlayerLoginRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbilityHashCode            int32                   `protobuf:"varint,4,opt,name=ability_hash_code,json=abilityHashCode,proto3" json:"ability_hash_code,omitempty"`
	ScInfo                     []byte                  `protobuf:"bytes,858,opt,name=sc_info,json=scInfo,proto3" json:"sc_info,omitempty"`
	CountryCode                string                  `protobuf:"bytes,286,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"` // AAEIDEMEKFF
	ShortAbilityHashMap        []*ShortAbilityHashPair `protobuf:"bytes,401,rep,name=short_ability_hash_map,json=shortAbilityHashMap,proto3" json:"short_ability_hash_map,omitempty"`
	ClientVersionSuffix        string                  `protobuf:"bytes,309,opt,name=client_version_suffix,json=clientVersionSuffix,proto3" json:"client_version_suffix,omitempty"`
	ClientSilenceMd5           string                  `protobuf:"bytes,1149,opt,name=clientSilenceMd5,proto3" json:"clientSilenceMd5,omitempty"`
	IsDataNeedRelogin          bool                    `protobuf:"varint,1063,opt,name=is_data_need_relogin,json=isDataNeedRelogin,proto3" json:"is_data_need_relogin,omitempty"`
	IsUseAbilityHash           bool                    `protobuf:"varint,2,opt,name=is_use_ability_hash,json=isUseAbilityHash,proto3" json:"is_use_ability_hash,omitempty"` // HKINPODGHHH
	ResVersionConfig           *ResVersionConfig       `protobuf:"bytes,1241,opt,name=res_version_config,json=resVersionConfig,proto3" json:"res_version_config,omitempty"`
	HKHOCPFCPAM                bool                    `protobuf:"varint,242,opt,name=HKHOCPFCPAM,proto3" json:"HKHOCPFCPAM,omitempty"`
	DCFPMMCBEAD                uint32                  `protobuf:"varint,6,opt,name=DCFPMMCBEAD,proto3" json:"DCFPMMCBEAD,omitempty"`
	AbilityHashMap             map[string]int32        `protobuf:"bytes,11,rep,name=ability_hash_map,json=abilityHashMap,proto3" json:"ability_hash_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IsTransfer                 bool                    `protobuf:"varint,1162,opt,name=is_transfer,json=isTransfer,proto3" json:"is_transfer,omitempty"`
	ClientDataVersion          uint32                  `protobuf:"varint,10,opt,name=client_data_version,json=clientDataVersion,proto3" json:"client_data_version,omitempty"`
	FeatureBlockInfoList       []*FeatureBlockInfo     `protobuf:"bytes,1613,rep,name=feature_block_info_list,json=featureBlockInfoList,proto3" json:"feature_block_info_list,omitempty"`
	TotalTickTime              float64                 `protobuf:"fixed64,1940,opt,name=total_tick_time,json=totalTickTime,proto3" json:"total_tick_time,omitempty"`
	ClientSilenceVersionSuffix string                  `protobuf:"bytes,889,opt,name=client_silence_version_suffix,json=clientSilenceVersionSuffix,proto3" json:"client_silence_version_suffix,omitempty"`
	NextResVersionConfig       *ResVersionConfig       `protobuf:"bytes,670,opt,name=next_res_version_config,json=nextResVersionConfig,proto3" json:"next_res_version_config,omitempty"`
	FCJHOMPHEON                bool                    `protobuf:"varint,741,opt,name=FCJHOMPHEON,proto3" json:"FCJHOMPHEON,omitempty"`
	RegisterCps                string                  `protobuf:"bytes,1152,opt,name=register_cps,json=registerCps,proto3" json:"register_cps,omitempty"`
	Retcode                    int32                   `protobuf:"varint,5,opt,name=retcode,proto3" json:"retcode,omitempty"`
	GameBiz                    string                  `protobuf:"bytes,3,opt,name=game_biz,json=gameBiz,proto3" json:"game_biz,omitempty"`
	BMLPDBNDAIJ                bool                    `protobuf:"varint,15,opt,name=BMLPDBNDAIJ,proto3" json:"BMLPDBNDAIJ,omitempty"`
	IsScOpen                   bool                    `protobuf:"varint,1257,opt,name=is_sc_open,json=isScOpen,proto3" json:"is_sc_open,omitempty"` // FLEDDLEFFLK
	LoginRand                  uint64                  `protobuf:"varint,1,opt,name=login_rand,json=loginRand,proto3" json:"login_rand,omitempty"`
	Birthday                   string                  `protobuf:"bytes,1129,opt,name=birthday,proto3" json:"birthday,omitempty"`
	IsAudit                    bool                    `protobuf:"varint,461,opt,name=is_audit,json=isAudit,proto3" json:"is_audit,omitempty"`
	ClientMd5                  string                  `protobuf:"bytes,625,opt,name=clientMd5,proto3" json:"clientMd5,omitempty"`
	BJLCFHHIGJD                bool                    `protobuf:"varint,8,opt,name=BJLCFHHIGJD,proto3" json:"BJLCFHHIGJD,omitempty"`
	ClientSilenceDataVersion   uint32                  `protobuf:"varint,9,opt,name=client_silence_data_version,json=clientSilenceDataVersion,proto3" json:"client_silence_data_version,omitempty"`
	FMOKLFNAOOK                uint32                  `protobuf:"varint,892,opt,name=FMOKLFNAOOK,proto3" json:"FMOKLFNAOOK,omitempty"`
	JLDGJOPFALG                []byte                  `protobuf:"bytes,7,opt,name=JLDGJOPFALG,proto3" json:"JLDGJOPFALG,omitempty"`
	NextResourceUrl            string                  `protobuf:"bytes,300,opt,name=next_resource_url,json=nextResourceUrl,proto3" json:"next_resource_url,omitempty"`
	TargetUid                  uint32                  `protobuf:"varint,12,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
	BlockInfoMap               map[uint32]*BlockInfo   `protobuf:"bytes,771,rep,name=block_info_map,json=blockInfoMap,proto3" json:"block_info_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PlayerLoginRsp) Reset() {
	*x = PlayerLoginRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlayerLoginRsp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerLoginRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerLoginRsp) ProtoMessage() {}

func (x *PlayerLoginRsp) ProtoReflect() protoreflect.Message {
	mi := &file_PlayerLoginRsp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerLoginRsp.ProtoReflect.Descriptor instead.
func (*PlayerLoginRsp) Descriptor() ([]byte, []int) {
	return file_PlayerLoginRsp_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerLoginRsp) GetAbilityHashCode() int32 {
	if x != nil {
		return x.AbilityHashCode
	}
	return 0
}

func (x *PlayerLoginRsp) GetScInfo() []byte {
	if x != nil {
		return x.ScInfo
	}
	return nil
}

func (x *PlayerLoginRsp) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *PlayerLoginRsp) GetShortAbilityHashMap() []*ShortAbilityHashPair {
	if x != nil {
		return x.ShortAbilityHashMap
	}
	return nil
}

func (x *PlayerLoginRsp) GetClientVersionSuffix() string {
	if x != nil {
		return x.ClientVersionSuffix
	}
	return ""
}

func (x *PlayerLoginRsp) GetClientSilenceMd5() string {
	if x != nil {
		return x.ClientSilenceMd5
	}
	return ""
}

func (x *PlayerLoginRsp) GetIsDataNeedRelogin() bool {
	if x != nil {
		return x.IsDataNeedRelogin
	}
	return false
}

func (x *PlayerLoginRsp) GetIsUseAbilityHash() bool {
	if x != nil {
		return x.IsUseAbilityHash
	}
	return false
}

func (x *PlayerLoginRsp) GetResVersionConfig() *ResVersionConfig {
	if x != nil {
		return x.ResVersionConfig
	}
	return nil
}

func (x *PlayerLoginRsp) GetHKHOCPFCPAM() bool {
	if x != nil {
		return x.HKHOCPFCPAM
	}
	return false
}

func (x *PlayerLoginRsp) GetDCFPMMCBEAD() uint32 {
	if x != nil {
		return x.DCFPMMCBEAD
	}
	return 0
}

func (x *PlayerLoginRsp) GetAbilityHashMap() map[string]int32 {
	if x != nil {
		return x.AbilityHashMap
	}
	return nil
}

func (x *PlayerLoginRsp) GetIsTransfer() bool {
	if x != nil {
		return x.IsTransfer
	}
	return false
}

func (x *PlayerLoginRsp) GetClientDataVersion() uint32 {
	if x != nil {
		return x.ClientDataVersion
	}
	return 0
}

func (x *PlayerLoginRsp) GetFeatureBlockInfoList() []*FeatureBlockInfo {
	if x != nil {
		return x.FeatureBlockInfoList
	}
	return nil
}

func (x *PlayerLoginRsp) GetTotalTickTime() float64 {
	if x != nil {
		return x.TotalTickTime
	}
	return 0
}

func (x *PlayerLoginRsp) GetClientSilenceVersionSuffix() string {
	if x != nil {
		return x.ClientSilenceVersionSuffix
	}
	return ""
}

func (x *PlayerLoginRsp) GetNextResVersionConfig() *ResVersionConfig {
	if x != nil {
		return x.NextResVersionConfig
	}
	return nil
}

func (x *PlayerLoginRsp) GetFCJHOMPHEON() bool {
	if x != nil {
		return x.FCJHOMPHEON
	}
	return false
}

func (x *PlayerLoginRsp) GetRegisterCps() string {
	if x != nil {
		return x.RegisterCps
	}
	return ""
}

func (x *PlayerLoginRsp) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *PlayerLoginRsp) GetGameBiz() string {
	if x != nil {
		return x.GameBiz
	}
	return ""
}

func (x *PlayerLoginRsp) GetBMLPDBNDAIJ() bool {
	if x != nil {
		return x.BMLPDBNDAIJ
	}
	return false
}

func (x *PlayerLoginRsp) GetIsScOpen() bool {
	if x != nil {
		return x.IsScOpen
	}
	return false
}

func (x *PlayerLoginRsp) GetLoginRand() uint64 {
	if x != nil {
		return x.LoginRand
	}
	return 0
}

func (x *PlayerLoginRsp) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *PlayerLoginRsp) GetIsAudit() bool {
	if x != nil {
		return x.IsAudit
	}
	return false
}

func (x *PlayerLoginRsp) GetClientMd5() string {
	if x != nil {
		return x.ClientMd5
	}
	return ""
}

func (x *PlayerLoginRsp) GetBJLCFHHIGJD() bool {
	if x != nil {
		return x.BJLCFHHIGJD
	}
	return false
}

func (x *PlayerLoginRsp) GetClientSilenceDataVersion() uint32 {
	if x != nil {
		return x.ClientSilenceDataVersion
	}
	return 0
}

func (x *PlayerLoginRsp) GetFMOKLFNAOOK() uint32 {
	if x != nil {
		return x.FMOKLFNAOOK
	}
	return 0
}

func (x *PlayerLoginRsp) GetJLDGJOPFALG() []byte {
	if x != nil {
		return x.JLDGJOPFALG
	}
	return nil
}

func (x *PlayerLoginRsp) GetNextResourceUrl() string {
	if x != nil {
		return x.NextResourceUrl
	}
	return ""
}

func (x *PlayerLoginRsp) GetTargetUid() uint32 {
	if x != nil {
		return x.TargetUid
	}
	return 0
}

func (x *PlayerLoginRsp) GetBlockInfoMap() map[uint32]*BlockInfo {
	if x != nil {
		return x.BlockInfoMap
	}
	return nil
}

var File_PlayerLoginRsp_proto protoreflect.FileDescriptor

var file_PlayerLoginRsp_proto_rawDesc = []byte{
	0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x52, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x41, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x68, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x0d, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xda, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x9e, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4b, 0x0a, 0x16, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x91, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x50, 0x61, 0x69, 0x72, 0x52, 0x13, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x41,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x61, 0x70, 0x12, 0x33, 0x0a,
	0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0xb5, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x12, 0x2b, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x4d, 0x64, 0x35, 0x18, 0xfd, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x64, 0x35, 0x12,
	0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0xa7, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x69, 0x73, 0x55, 0x73, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x40, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd9, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x52, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x10, 0x72, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x21, 0x0a, 0x0b, 0x48, 0x4b, 0x48, 0x4f, 0x43, 0x50, 0x46, 0x43, 0x50, 0x41,
	0x4d, 0x18, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x48, 0x4b, 0x48, 0x4f, 0x43, 0x50,
	0x46, 0x43, 0x50, 0x41, 0x4d, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x43, 0x46, 0x50, 0x4d, 0x4d, 0x43,
	0x42, 0x45, 0x41, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x44, 0x43, 0x46, 0x50,
	0x4d, 0x4d, 0x43, 0x42, 0x45, 0x41, 0x44, 0x12, 0x4d, 0x0a, 0x10, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x73, 0x70, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48,
	0x61, 0x73, 0x68, 0x4d, 0x61, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x8a, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x17, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0xcd, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x94, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0xf9, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x12, 0x49, 0x0a, 0x17, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x9e, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0b, 0x46,
	0x43, 0x4a, 0x48, 0x4f, 0x4d, 0x50, 0x48, 0x45, 0x4f, 0x4e, 0x18, 0xe5, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x46, 0x43, 0x4a, 0x48, 0x4f, 0x4d, 0x50, 0x48, 0x45, 0x4f, 0x4e, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x70, 0x73, 0x18, 0x80,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x69, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x7a, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x4d, 0x4c, 0x50, 0x44,
	0x42, 0x4e, 0x44, 0x41, 0x49, 0x4a, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x42, 0x4d,
	0x4c, 0x50, 0x44, 0x42, 0x4e, 0x44, 0x41, 0x49, 0x4a, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x73, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0xe9, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x53, 0x63, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x79, 0x18, 0xe9, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x18, 0xcd, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x12, 0x1d, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x64, 0x35, 0x18, 0xf1, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x64, 0x35, 0x12,
	0x20, 0x0a, 0x0b, 0x42, 0x4a, 0x4c, 0x43, 0x46, 0x48, 0x48, 0x49, 0x47, 0x4a, 0x44, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x42, 0x4a, 0x4c, 0x43, 0x46, 0x48, 0x48, 0x49, 0x47, 0x4a,
	0x44, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0b, 0x46, 0x4d, 0x4f, 0x4b, 0x4c, 0x46, 0x4e, 0x41, 0x4f, 0x4f, 0x4b, 0x18,
	0xfc, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x46, 0x4d, 0x4f, 0x4b, 0x4c, 0x46, 0x4e, 0x41,
	0x4f, 0x4f, 0x4b, 0x12, 0x20, 0x0a, 0x0b, 0x4a, 0x4c, 0x44, 0x47, 0x4a, 0x4f, 0x50, 0x46, 0x41,
	0x4c, 0x47, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x4a, 0x4c, 0x44, 0x47, 0x4a, 0x4f,
	0x50, 0x46, 0x41, 0x4c, 0x47, 0x12, 0x2b, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69,
	0x64, 0x12, 0x48, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x83, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x1a, 0x41, 0x0a, 0x13, 0x41,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b,
	0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x5a, 0x04, 0x67,
	0x65, 0x6e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_PlayerLoginRsp_proto_rawDescOnce sync.Once
	file_PlayerLoginRsp_proto_rawDescData = file_PlayerLoginRsp_proto_rawDesc
)

func file_PlayerLoginRsp_proto_rawDescGZIP() []byte {
	file_PlayerLoginRsp_proto_rawDescOnce.Do(func() {
		file_PlayerLoginRsp_proto_rawDescData = protoimpl.X.CompressGZIP(file_PlayerLoginRsp_proto_rawDescData)
	})
	return file_PlayerLoginRsp_proto_rawDescData
}

var file_PlayerLoginRsp_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_PlayerLoginRsp_proto_goTypes = []interface{}{
	(*PlayerLoginRsp)(nil),       // 0: PlayerLoginRsp
	nil,                          // 1: PlayerLoginRsp.AbilityHashMapEntry
	nil,                          // 2: PlayerLoginRsp.BlockInfoMapEntry
	(*ShortAbilityHashPair)(nil), // 3: ShortAbilityHashPair
	(*ResVersionConfig)(nil),     // 4: ResVersionConfig
	(*FeatureBlockInfo)(nil),     // 5: FeatureBlockInfo
	(*BlockInfo)(nil),            // 6: BlockInfo
}
var file_PlayerLoginRsp_proto_depIdxs = []int32{
	3, // 0: PlayerLoginRsp.short_ability_hash_map:type_name -> ShortAbilityHashPair
	4, // 1: PlayerLoginRsp.res_version_config:type_name -> ResVersionConfig
	1, // 2: PlayerLoginRsp.ability_hash_map:type_name -> PlayerLoginRsp.AbilityHashMapEntry
	5, // 3: PlayerLoginRsp.feature_block_info_list:type_name -> FeatureBlockInfo
	4, // 4: PlayerLoginRsp.next_res_version_config:type_name -> ResVersionConfig
	2, // 5: PlayerLoginRsp.block_info_map:type_name -> PlayerLoginRsp.BlockInfoMapEntry
	6, // 6: PlayerLoginRsp.BlockInfoMapEntry.value:type_name -> BlockInfo
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_PlayerLoginRsp_proto_init() }
func file_PlayerLoginRsp_proto_init() {
	if File_PlayerLoginRsp_proto != nil {
		return
	}
	file_BlockInfo_proto_init()
	file_FeatureBlockInfo_proto_init()
	file_ResVersionConfig_proto_init()
	file_ShortAbilityHashPair_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_PlayerLoginRsp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerLoginRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_PlayerLoginRsp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_PlayerLoginRsp_proto_goTypes,
		DependencyIndexes: file_PlayerLoginRsp_proto_depIdxs,
		MessageInfos:      file_PlayerLoginRsp_proto_msgTypes,
	}.Build()
	File_PlayerLoginRsp_proto = out.File
	file_PlayerLoginRsp_proto_rawDesc = nil
	file_PlayerLoginRsp_proto_goTypes = nil
	file_PlayerLoginRsp_proto_depIdxs = nil
}
