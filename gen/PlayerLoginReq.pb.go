// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.0
// source: PlayerLoginReq.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CmdId: 189
// Name: CLFNBHKDFFH
type PlayerLoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KDIHPMJOCPG           uint32              `protobuf:"varint,909,opt,name=KDIHPMJOCPG,proto3" json:"KDIHPMJOCPG,omitempty"`
	PNJNCCNPILL           uint32              `protobuf:"varint,2033,opt,name=PNJNCCNPILL,proto3" json:"PNJNCCNPILL,omitempty"`
	Token                 string              `protobuf:"bytes,8,opt,name=token,proto3" json:"token,omitempty"`
	IsGuest               bool                `protobuf:"varint,6,opt,name=is_guest,json=isGuest,proto3" json:"is_guest,omitempty"`
	JKPKMFPELKK           string              `protobuf:"bytes,778,opt,name=JKPKMFPELKK,proto3" json:"JKPKMFPELKK,omitempty"`
	OnlineId              string              `protobuf:"bytes,1781,opt,name=online_id,json=onlineId,proto3" json:"online_id,omitempty"`
	AdjustTrackingInfo    *AdjustTrackingInfo `protobuf:"bytes,2010,opt,name=adjust_tracking_info,json=adjustTrackingInfo,proto3" json:"adjust_tracking_info,omitempty"`
	LoginRand             uint64              `protobuf:"varint,12,opt,name=login_rand,json=loginRand,proto3" json:"login_rand,omitempty"`
	TrackingIoInfo        *TrackingIOInfo     `protobuf:"bytes,498,opt,name=tracking_io_info,json=trackingIoInfo,proto3" json:"tracking_io_info,omitempty"`
	LanguageType          uint32              `protobuf:"varint,7,opt,name=language_type,json=languageType,proto3" json:"language_type,omitempty"`
	CJHEEAGCFJG           uint32              `protobuf:"varint,2015,opt,name=CJHEEAGCFJG,proto3" json:"CJHEEAGCFJG,omitempty"`
	FGAKKMHIKHF           uint32              `protobuf:"varint,829,opt,name=FGAKKMHIKHF,proto3" json:"FGAKKMHIKHF,omitempty"`
	SystemVersion         string              `protobuf:"bytes,2,opt,name=system_version,json=systemVersion,proto3" json:"system_version,omitempty"`
	DOAPGNNFLBJ           string              `protobuf:"bytes,1352,opt,name=DOAPGNNFLBJ,proto3" json:"DOAPGNNFLBJ,omitempty"`
	AccountUid            string              `protobuf:"bytes,4,opt,name=account_uid,json=accountUid,proto3" json:"account_uid,omitempty"`
	TargetUid             uint32              `protobuf:"varint,14,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
	SecurityLibraryMd5    string              `protobuf:"bytes,254,opt,name=security_library_md5,json=securityLibraryMd5,proto3" json:"security_library_md5,omitempty"`
	CountryCode           string              `protobuf:"bytes,936,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	FIDMBJJPBEH           uint32              `protobuf:"varint,832,opt,name=FIDMBJJPBEH,proto3" json:"FIDMBJJPBEH,omitempty"`
	Checksum              string              `protobuf:"bytes,1953,opt,name=checksum,proto3" json:"checksum,omitempty"`
	DeviceInfo            string              `protobuf:"bytes,11,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
	JLOPICGGPBP           []byte              `protobuf:"bytes,978,opt,name=JLOPICGGPBP,proto3" json:"JLOPICGGPBP,omitempty"`
	ChecksumClientVersion string              `protobuf:"bytes,823,opt,name=checksum_client_version,json=checksumClientVersion,proto3" json:"checksum_client_version,omitempty"`
	ECJMGOCEABB           uint32              `protobuf:"varint,1650,opt,name=ECJMGOCEABB,proto3" json:"ECJMGOCEABB,omitempty"`
	ENNPHCJEFFC           string              `protobuf:"bytes,3,opt,name=ENNPHCJEFFC,proto3" json:"ENNPHCJEFFC,omitempty"`
	PsnId                 string              `protobuf:"bytes,1125,opt,name=psn_id,json=psnId,proto3" json:"psn_id,omitempty"`
	IsEditor              bool                `protobuf:"varint,10,opt,name=is_editor,json=isEditor,proto3" json:"is_editor,omitempty"`
	EnvironmentErrorCode  []byte              `protobuf:"bytes,922,opt,name=environment_error_code,json=environmentErrorCode,proto3" json:"environment_error_code,omitempty"`
	Platform              string              `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	ChannelId             uint32              `protobuf:"varint,913,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	IsTransfer            bool                `protobuf:"varint,1382,opt,name=is_transfer,json=isTransfer,proto3" json:"is_transfer,omitempty"`
	ClientVerisonHash     string              `protobuf:"bytes,1519,opt,name=client_verison_hash,json=clientVerisonHash,proto3" json:"client_verison_hash,omitempty"`
	DeviceName            string              `protobuf:"bytes,9,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	FMOKLFNAOOK           uint32              `protobuf:"varint,1173,opt,name=FMOKLFNAOOK,proto3" json:"FMOKLFNAOOK,omitempty"`
	Tag                   uint32              `protobuf:"varint,1897,opt,name=tag,proto3" json:"tag,omitempty"`
	CIJNPHDIOND           uint32              `protobuf:"varint,5,opt,name=CIJNPHDIOND,proto3" json:"CIJNPHDIOND,omitempty"`
	ClientDataVersion     uint32              `protobuf:"varint,1098,opt,name=client_data_version,json=clientDataVersion,proto3" json:"client_data_version,omitempty"`
	DABNCDNACJK           string              `protobuf:"bytes,587,opt,name=DABNCDNACJK,proto3" json:"DABNCDNACJK,omitempty"`
	DeviceUuid            string              `protobuf:"bytes,13,opt,name=device_uuid,json=deviceUuid,proto3" json:"device_uuid,omitempty"`
	PlatformType          uint32              `protobuf:"varint,15,opt,name=platform_type,json=platformType,proto3" json:"platform_type,omitempty"`
	SecurityCmdReply      []byte              `protobuf:"bytes,1959,opt,name=security_cmd_reply,json=securityCmdReply,proto3" json:"security_cmd_reply,omitempty"`
	LFPHHMGKIIP           uint32              `protobuf:"varint,1187,opt,name=LFPHHMGKIIP,proto3" json:"LFPHHMGKIIP,omitempty"`
	Birthday              string              `protobuf:"bytes,1256,opt,name=birthday,proto3" json:"birthday,omitempty"`
}

func (x *PlayerLoginReq) Reset() {
	*x = PlayerLoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PlayerLoginReq_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerLoginReq) ProtoMessage() {}

func (x *PlayerLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_PlayerLoginReq_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerLoginReq.ProtoReflect.Descriptor instead.
func (*PlayerLoginReq) Descriptor() ([]byte, []int) {
	return file_PlayerLoginReq_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerLoginReq) GetKDIHPMJOCPG() uint32 {
	if x != nil {
		return x.KDIHPMJOCPG
	}
	return 0
}

func (x *PlayerLoginReq) GetPNJNCCNPILL() uint32 {
	if x != nil {
		return x.PNJNCCNPILL
	}
	return 0
}

func (x *PlayerLoginReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *PlayerLoginReq) GetIsGuest() bool {
	if x != nil {
		return x.IsGuest
	}
	return false
}

func (x *PlayerLoginReq) GetJKPKMFPELKK() string {
	if x != nil {
		return x.JKPKMFPELKK
	}
	return ""
}

func (x *PlayerLoginReq) GetOnlineId() string {
	if x != nil {
		return x.OnlineId
	}
	return ""
}

func (x *PlayerLoginReq) GetAdjustTrackingInfo() *AdjustTrackingInfo {
	if x != nil {
		return x.AdjustTrackingInfo
	}
	return nil
}

func (x *PlayerLoginReq) GetLoginRand() uint64 {
	if x != nil {
		return x.LoginRand
	}
	return 0
}

func (x *PlayerLoginReq) GetTrackingIoInfo() *TrackingIOInfo {
	if x != nil {
		return x.TrackingIoInfo
	}
	return nil
}

func (x *PlayerLoginReq) GetLanguageType() uint32 {
	if x != nil {
		return x.LanguageType
	}
	return 0
}

func (x *PlayerLoginReq) GetCJHEEAGCFJG() uint32 {
	if x != nil {
		return x.CJHEEAGCFJG
	}
	return 0
}

func (x *PlayerLoginReq) GetFGAKKMHIKHF() uint32 {
	if x != nil {
		return x.FGAKKMHIKHF
	}
	return 0
}

func (x *PlayerLoginReq) GetSystemVersion() string {
	if x != nil {
		return x.SystemVersion
	}
	return ""
}

func (x *PlayerLoginReq) GetDOAPGNNFLBJ() string {
	if x != nil {
		return x.DOAPGNNFLBJ
	}
	return ""
}

func (x *PlayerLoginReq) GetAccountUid() string {
	if x != nil {
		return x.AccountUid
	}
	return ""
}

func (x *PlayerLoginReq) GetTargetUid() uint32 {
	if x != nil {
		return x.TargetUid
	}
	return 0
}

func (x *PlayerLoginReq) GetSecurityLibraryMd5() string {
	if x != nil {
		return x.SecurityLibraryMd5
	}
	return ""
}

func (x *PlayerLoginReq) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *PlayerLoginReq) GetFIDMBJJPBEH() uint32 {
	if x != nil {
		return x.FIDMBJJPBEH
	}
	return 0
}

func (x *PlayerLoginReq) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *PlayerLoginReq) GetDeviceInfo() string {
	if x != nil {
		return x.DeviceInfo
	}
	return ""
}

func (x *PlayerLoginReq) GetJLOPICGGPBP() []byte {
	if x != nil {
		return x.JLOPICGGPBP
	}
	return nil
}

func (x *PlayerLoginReq) GetChecksumClientVersion() string {
	if x != nil {
		return x.ChecksumClientVersion
	}
	return ""
}

func (x *PlayerLoginReq) GetECJMGOCEABB() uint32 {
	if x != nil {
		return x.ECJMGOCEABB
	}
	return 0
}

func (x *PlayerLoginReq) GetENNPHCJEFFC() string {
	if x != nil {
		return x.ENNPHCJEFFC
	}
	return ""
}

func (x *PlayerLoginReq) GetPsnId() string {
	if x != nil {
		return x.PsnId
	}
	return ""
}

func (x *PlayerLoginReq) GetIsEditor() bool {
	if x != nil {
		return x.IsEditor
	}
	return false
}

func (x *PlayerLoginReq) GetEnvironmentErrorCode() []byte {
	if x != nil {
		return x.EnvironmentErrorCode
	}
	return nil
}

func (x *PlayerLoginReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *PlayerLoginReq) GetChannelId() uint32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *PlayerLoginReq) GetIsTransfer() bool {
	if x != nil {
		return x.IsTransfer
	}
	return false
}

func (x *PlayerLoginReq) GetClientVerisonHash() string {
	if x != nil {
		return x.ClientVerisonHash
	}
	return ""
}

func (x *PlayerLoginReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *PlayerLoginReq) GetFMOKLFNAOOK() uint32 {
	if x != nil {
		return x.FMOKLFNAOOK
	}
	return 0
}

func (x *PlayerLoginReq) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *PlayerLoginReq) GetCIJNPHDIOND() uint32 {
	if x != nil {
		return x.CIJNPHDIOND
	}
	return 0
}

func (x *PlayerLoginReq) GetClientDataVersion() uint32 {
	if x != nil {
		return x.ClientDataVersion
	}
	return 0
}

func (x *PlayerLoginReq) GetDABNCDNACJK() string {
	if x != nil {
		return x.DABNCDNACJK
	}
	return ""
}

func (x *PlayerLoginReq) GetDeviceUuid() string {
	if x != nil {
		return x.DeviceUuid
	}
	return ""
}

func (x *PlayerLoginReq) GetPlatformType() uint32 {
	if x != nil {
		return x.PlatformType
	}
	return 0
}

func (x *PlayerLoginReq) GetSecurityCmdReply() []byte {
	if x != nil {
		return x.SecurityCmdReply
	}
	return nil
}

func (x *PlayerLoginReq) GetLFPHHMGKIIP() uint32 {
	if x != nil {
		return x.LFPHHMGKIIP
	}
	return 0
}

func (x *PlayerLoginReq) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

var File_PlayerLoginReq_proto protoreflect.FileDescriptor

var file_PlayerLoginReq_proto_rawDesc = []byte{
	0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x4f, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x0c, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0b, 0x4b, 0x44, 0x49,
	0x48, 0x50, 0x4d, 0x4a, 0x4f, 0x43, 0x50, 0x47, 0x18, 0x8d, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x4b, 0x44, 0x49, 0x48, 0x50, 0x4d, 0x4a, 0x4f, 0x43, 0x50, 0x47, 0x12, 0x21, 0x0a, 0x0b,
	0x50, 0x4e, 0x4a, 0x4e, 0x43, 0x43, 0x4e, 0x50, 0x49, 0x4c, 0x4c, 0x18, 0xf1, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x50, 0x4e, 0x4a, 0x4e, 0x43, 0x43, 0x4e, 0x50, 0x49, 0x4c, 0x4c, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x67, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x47, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0b, 0x4a, 0x4b, 0x50, 0x4b, 0x4d, 0x46, 0x50, 0x45, 0x4c, 0x4b, 0x4b, 0x18,
	0x8a, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4a, 0x4b, 0x50, 0x4b, 0x4d, 0x46, 0x50, 0x45,
	0x4c, 0x4b, 0x4b, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0xf5, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x64, 0x12, 0x46, 0x0a, 0x14, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xda, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xf2, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x4f,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6f,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x43, 0x4a, 0x48,
	0x45, 0x45, 0x41, 0x47, 0x43, 0x46, 0x4a, 0x47, 0x18, 0xdf, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x43, 0x4a, 0x48, 0x45, 0x45, 0x41, 0x47, 0x43, 0x46, 0x4a, 0x47, 0x12, 0x21, 0x0a, 0x0b,
	0x46, 0x47, 0x41, 0x4b, 0x4b, 0x4d, 0x48, 0x49, 0x4b, 0x48, 0x46, 0x18, 0xbd, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x46, 0x47, 0x41, 0x4b, 0x4b, 0x4d, 0x48, 0x49, 0x4b, 0x48, 0x46, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x44, 0x4f, 0x41, 0x50, 0x47, 0x4e,
	0x4e, 0x46, 0x4c, 0x42, 0x4a, 0x18, 0xc8, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x4f,
	0x41, 0x50, 0x47, 0x4e, 0x4e, 0x46, 0x4c, 0x42, 0x4a, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x64,
	0x35, 0x18, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x64, 0x35, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0xa8, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x21, 0x0a, 0x0b, 0x46, 0x49, 0x44, 0x4d, 0x42, 0x4a, 0x4a, 0x50, 0x42, 0x45, 0x48, 0x18,
	0xc0, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x46, 0x49, 0x44, 0x4d, 0x42, 0x4a, 0x4a, 0x50,
	0x42, 0x45, 0x48, 0x12, 0x1b, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18,
	0xa1, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x21, 0x0a, 0x0b, 0x4a, 0x4c, 0x4f, 0x50, 0x49, 0x43, 0x47, 0x47, 0x50, 0x42, 0x50,
	0x18, 0xd2, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x4a, 0x4c, 0x4f, 0x50, 0x49, 0x43, 0x47,
	0x47, 0x50, 0x42, 0x50, 0x12, 0x37, 0x0a, 0x17, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0xb7, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0b, 0x45, 0x43, 0x4a, 0x4d, 0x47, 0x4f, 0x43, 0x45, 0x41, 0x42, 0x42, 0x18, 0xf2, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x45, 0x43, 0x4a, 0x4d, 0x47, 0x4f, 0x43, 0x45, 0x41, 0x42, 0x42,
	0x12, 0x20, 0x0a, 0x0b, 0x45, 0x4e, 0x4e, 0x50, 0x48, 0x43, 0x4a, 0x45, 0x46, 0x46, 0x43, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x4e, 0x4e, 0x50, 0x48, 0x43, 0x4a, 0x45, 0x46,
	0x46, 0x43, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x73, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xe5, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x73, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x16, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x9a, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x91, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0xe6, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0xef, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0b, 0x46, 0x4d, 0x4f, 0x4b, 0x4c, 0x46, 0x4e, 0x41, 0x4f, 0x4f, 0x4b, 0x18, 0x95, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x46, 0x4d, 0x4f, 0x4b, 0x4c, 0x46, 0x4e, 0x41, 0x4f, 0x4f,
	0x4b, 0x12, 0x11, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0xe9, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x49, 0x4a, 0x4e, 0x50, 0x48, 0x44, 0x49,
	0x4f, 0x4e, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43, 0x49, 0x4a, 0x4e, 0x50,
	0x48, 0x44, 0x49, 0x4f, 0x4e, 0x44, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xca, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x44, 0x41, 0x42, 0x4e, 0x43,
	0x44, 0x4e, 0x41, 0x43, 0x4a, 0x4b, 0x18, 0xcb, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44,
	0x41, 0x42, 0x4e, 0x43, 0x44, 0x4e, 0x41, 0x43, 0x4a, 0x4b, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6d, 0x64,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0xa7, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6d, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x21, 0x0a, 0x0b, 0x4c, 0x46, 0x50, 0x48, 0x48, 0x4d, 0x47, 0x4b, 0x49, 0x49, 0x50, 0x18, 0xa3,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4c, 0x46, 0x50, 0x48, 0x48, 0x4d, 0x47, 0x4b, 0x49,
	0x49, 0x50, 0x12, 0x1b, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0xe8,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x42,
	0x06, 0x5a, 0x04, 0x67, 0x65, 0x6e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_PlayerLoginReq_proto_rawDescOnce sync.Once
	file_PlayerLoginReq_proto_rawDescData = file_PlayerLoginReq_proto_rawDesc
)

func file_PlayerLoginReq_proto_rawDescGZIP() []byte {
	file_PlayerLoginReq_proto_rawDescOnce.Do(func() {
		file_PlayerLoginReq_proto_rawDescData = protoimpl.X.CompressGZIP(file_PlayerLoginReq_proto_rawDescData)
	})
	return file_PlayerLoginReq_proto_rawDescData
}

var file_PlayerLoginReq_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_PlayerLoginReq_proto_goTypes = []interface{}{
	(*PlayerLoginReq)(nil),     // 0: PlayerLoginReq
	(*AdjustTrackingInfo)(nil), // 1: AdjustTrackingInfo
	(*TrackingIOInfo)(nil),     // 2: TrackingIOInfo
}
var file_PlayerLoginReq_proto_depIdxs = []int32{
	1, // 0: PlayerLoginReq.adjust_tracking_info:type_name -> AdjustTrackingInfo
	2, // 1: PlayerLoginReq.tracking_io_info:type_name -> TrackingIOInfo
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_PlayerLoginReq_proto_init() }
func file_PlayerLoginReq_proto_init() {
	if File_PlayerLoginReq_proto != nil {
		return
	}
	file_AdjustTrackingInfo_proto_init()
	file_TrackingIOInfo_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_PlayerLoginReq_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerLoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_PlayerLoginReq_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_PlayerLoginReq_proto_goTypes,
		DependencyIndexes: file_PlayerLoginReq_proto_depIdxs,
		MessageInfos:      file_PlayerLoginReq_proto_msgTypes,
	}.Build()
	File_PlayerLoginReq_proto = out.File
	file_PlayerLoginReq_proto_rawDesc = nil
	file_PlayerLoginReq_proto_goTypes = nil
	file_PlayerLoginReq_proto_depIdxs = nil
}
